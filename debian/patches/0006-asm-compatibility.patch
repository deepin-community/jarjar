Description: Fixes the compatibility with the latest version of ASM.
 Starting with ASM 5.1 the SignatureRemapper class must be included.
 Starting with ASM 6.0 RemappingClassAdapter is deprecated in favor of ClassRemapper
Author: Emmanuel Bourg <ebourg@apache.org>
Forwarded: no
--- a/build.xml
+++ b/build.xml
@@ -96,10 +96,7 @@
         <jarjar jarfile="${jarfile}">
             <fileset dir="build/main"/>
             <zipfileset src="${asm.jar}"/>
-            <zipfileset src="${asm-commons.jar}">
-                <include name="org/objectweb/asm/commons/Remap*.class"/>
-                <include name="org/objectweb/asm/commons/LocalVariablesSorter.class"/>
-            </zipfileset>
+            <zipfileset src="${asm-commons.jar}"/>
         	<keep pattern="com.tonicsystems.jarjar.Main"/>
             <keep pattern="com.tonicsystems.jarjar.JarJarTask"/>
             <rule pattern="com.tonicsystems.jarjar.util.**" result="com.tonicsystems.jarjar.ext_util.@1"/>
--- a/src/main/com/tonicsystems/jarjar/DepFindVisitor.java
+++ b/src/main/com/tonicsystems/jarjar/DepFindVisitor.java
@@ -25,7 +25,7 @@
 import org.objectweb.asm.Type;
 import org.objectweb.asm.commons.*;
 
-class DepFindVisitor extends RemappingClassAdapter
+class DepFindVisitor extends ClassRemapper
 {
     public DepFindVisitor(Map<String, String> classes, String source, DepHandler handler) throws IOException {
         super(null, new DepFindRemapper(classes, source, handler));
--- a/src/main/com/tonicsystems/jarjar/KeepProcessor.java
+++ b/src/main/com/tonicsystems/jarjar/KeepProcessor.java
@@ -26,7 +26,7 @@
 // TODO: this can probably be refactored into JarClassVisitor, etc.
 class KeepProcessor extends Remapper implements JarProcessor
 {
-    private final ClassVisitor cv = new RemappingClassAdapter(new EmptyClassVisitor(), this);
+    private final ClassVisitor cv = new ClassRemapper(new EmptyClassVisitor(), this);
     private final List<Wildcard> wildcards;
     private final List<String> roots = new ArrayList<String>();
     private final Map<String, Set<String>> depend = new HashMap<String, Set<String>>();
--- a/src/main/com/tonicsystems/jarjar/util/RemappingClassTransformer.java
+++ b/src/main/com/tonicsystems/jarjar/util/RemappingClassTransformer.java
@@ -18,11 +18,11 @@
 
 import org.objectweb.asm.ClassVisitor;
 import org.objectweb.asm.commons.Remapper;
-import org.objectweb.asm.commons.RemappingClassAdapter;
+import org.objectweb.asm.commons.ClassRemapper;
 
 import com.tonicsystems.jarjar.EmptyClassVisitor;
 
-public class RemappingClassTransformer extends RemappingClassAdapter
+public class RemappingClassTransformer extends ClassRemapper
 {
     public RemappingClassTransformer(Remapper pr) {
         super(new EmptyClassVisitor(), pr);
--- a/src/main/com/tonicsystems/jarjar/EmptyClassVisitor.java
+++ b/src/main/com/tonicsystems/jarjar/EmptyClassVisitor.java
@@ -28,23 +28,23 @@
 public class EmptyClassVisitor extends ClassVisitor {
 
     public EmptyClassVisitor() {
-        super(Opcodes.ASM4);
+        super(Opcodes.ASM6);
     }
     
     @Override
     public MethodVisitor visitMethod(int access, String name, String desc,
             String signature, String[] exceptions) {
-        return new MethodVisitor(Opcodes.ASM4) {};
+        return new MethodVisitor(Opcodes.ASM6) {};
     }
     
     @Override
     public AnnotationVisitor visitAnnotation(String desc, boolean visible) {
-        return new AnnotationVisitor(Opcodes.ASM4) {};
+        return new AnnotationVisitor(Opcodes.ASM6) {};
     }
     
     @Override
     public FieldVisitor visitField(int access, String name, String desc, String signature, Object value) {
-        return new FieldVisitor(Opcodes.ASM4) {};
+        return new FieldVisitor(Opcodes.ASM6) {};
     }
 
 }
--- a/src/main/com/tonicsystems/jarjar/StringReader.java
+++ b/src/main/com/tonicsystems/jarjar/StringReader.java
@@ -24,7 +24,7 @@
     private String className;
 
     public StringReader() {
-        super(Opcodes.ASM4);
+        super(Opcodes.ASM6);
     }
     
     abstract public void visitString(String className, String value, int line);
@@ -42,7 +42,7 @@
 
     public FieldVisitor visitField(int access, String name, String desc, String signature, Object value) {
         handleObject(value);
-        return new FieldVisitor(Opcodes.ASM4){
+        return new FieldVisitor(Opcodes.ASM6){
             @Override
             public AnnotationVisitor visitAnnotation(String desc, boolean visible) {
                 return StringReader.this.visitAnnotation(desc, visible);
@@ -52,7 +52,7 @@
     
     @Override
     public AnnotationVisitor visitAnnotation(String desc, boolean visible) {
-        return new AnnotationVisitor(Opcodes.ASM4) {
+        return new AnnotationVisitor(Opcodes.ASM6) {
             @Override
             public void visit(String name, Object value) {
                 handleObject(value);
@@ -71,7 +71,7 @@
     @Override
     public MethodVisitor visitMethod(int access, String name, String desc,
             String signature, String[] exceptions) {
-        MethodVisitor mv = new MethodVisitor(Opcodes.ASM4){
+        MethodVisitor mv = new MethodVisitor(Opcodes.ASM6){
             @Override
             public void visitLdcInsn(Object cst) {
                 handleObject(cst);
--- a/src/main/com/tonicsystems/jarjar/util/GetNameClassWriter.java
+++ b/src/main/com/tonicsystems/jarjar/util/GetNameClassWriter.java
@@ -25,7 +25,7 @@
     private String className;
     
     public GetNameClassWriter(int flags) {
-        super(Opcodes.ASM4,new ClassWriter(flags));
+        super(Opcodes.ASM6,new ClassWriter(flags));
     }
 
     public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {
